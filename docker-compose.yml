services:
  mongodb:
    image: mongo:7.0
    platform: linux/arm64/v8
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
    networks:
      - ecommerce-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  product-management:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - KAFKA_BROKERS=kafka:9092
      - SERVICE_NAME=product-management
    networks:
      - ecommerce-net
    restart: unless-stopped

  order-management:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      mongodb:
        condition: service_healthy
      inventory-management:
        condition: service_started
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - KAFKA_BROKERS=kafka:9092
      - INVENTORY_API=http://inventory-management:8080
      - SERVICE_NAME=order-management
    networks:
      - ecommerce-net
    restart: unless-stopped

  inventory-management:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - SERVICE_NAME=inventory-management
    networks:
      - ecommerce-net
    restart: unless-stopped

volumes:
  mongodb_data:

networks:
  ecommerce-net:
    driver: bridge